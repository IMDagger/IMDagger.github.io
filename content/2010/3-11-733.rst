Динамическая загрузка из скриптов
=================================
:date: 2010-03-11 14:50:45
:tags: blender, возможности, bge
:category: text
:author: IMDagger
:yaru-link: http://imdagger.ya.ru/replies.xml?item_no=733

Добавил в BGE вызов функций отложенной загрузки объектов сцены из
другого blend-файла, а также функцию отложенной выгрузки. До этого можно
было лишь пользоваться актуатором:

.. code-block:: python

   cc = GameLogic.getCurrentController()
   blend_loader = cc.actuators['load']
   blend_loader.scene = 'Room stuff'
   room_number = 112
   blend_loader.blendFileName = '//room%s/stuff/main.blend' % room_number
   cc.activate(blend_loader)

blend\_loader загрузит сцену из файла с относительным путём
**//room112/stuff/main.blend**, \ **blendFileName** это свойство,
которое указывает имя файла. так способом можно загружать за одну
итерацию BGE только количество сцен равное количеству активированных
актуаторов. С выгрузкой аналогично. Такой подход может быть удобным,
если нужно по мере загрузки обновлять изображение на экране и
отрисовывать, например полосу прогресса загрузки.

Но бывает нужно за один подход загрузить несколько групп объектов.
Немноог напоминает транзакции из баз данных, т.е. ничего не должно
вклиниваться между загрузкой двух сцен, ни отрисовка, ни другие события
актуаторов или сенсоров. Эту проблему решит добавка отдельного API для
загрузки не через актуаторы:

.. code-block:: python

   room_file_name = '//room%s/stuff/main.blend'
   room_number = 112
   GameLogic.mergeBlendFile('Room Stuff', \
                '//room%s/stuff/main.blend' % room_number)
    room_number = 115
    GameLogic.unmergeBlendFile('Room Stuff', \
                room_file_name % room_number, True)

Т.е. в сцену, где расположен объект, на котором исполняется данных
скрипт контроллера, добавить объекты из сцены Room
Stuff //room112/stuff/main.blend :underline:`на следующей итерации`. И тут же
потребовать выгрузки на следующей итерации сцены
из //room115/stuff/main.blend, True указывает, что это **Forced** режим
(когда BGE пробудет удалить и blend-файл из памяти, если никто его не
использует). False — обычный режим, BGE удаляет объекты, но blend-файл
оставляет в памяти, чтобы в следующий раз не считывать с диска (вдруг
его опять скоро попросят загрузиться).

Нужно учитывать, что загрузка и выгрузка происходят на новой
итерации, но… проверка при выгрузке происходит сразу. Т.е., если
попросить загрузить **A** и тут же попросить выгрузить **A**, то
загрузка будет (на новой итерации), а при выгрузке скажет, что файл ещё
не загрузился (сразу после исполнения функции).

Соберусь с силами и сделаю ещё один билд. Нужно подправить
функционал связанный с оверлеями :) Я рассчитываю его тоже включить в
сборку.
