Бредни для себя
===============
:date: 2010-03-04 19:33:48
:tags: работа, бредни
:category: text
:author: IMDagger
:yaru-link: http://imdagger.ya.ru/replies.xml?item_no=710

    Нужно дописать отчёт-документацию по приложению и использованным
технологиям. А так же ссылки на литературу и форумы, где можно прочитать
тонкости. Пять страниц я уже написал, но не переработал в удобный вид.
Нужно ещё 15 написать и хватит. Как раз опишу необходимый минимум, на
котором базируется приложение. Ещё стоит пересмотреть по тегам все
записи блога по Hibernate, Tomcat и Java и включить их в отчёт, т.к. там
были интересные для меня решения и случаи. Кратки план на две первые
главы:

#.  Дать определения, что будет подразумеваться под понятиями: модель,
   DAO и сервис, для тех кто не знает. Указать преимущества такой схемы
   в данному случае.
#. Построить UML диаграмму классов, на которой показать, кто что
   использует (можно дополнительно пример ещё с Hibernate) при подходе с
   DAO.
#. Показать на примере то, что один сервис может использовать несколько
   DAO, которые могут даже не работать с БД, что сервис обрабатывает
   данные и выдаёт в удобном виде. Например, когда требуются
   дополнительные расчётные поля, которые не могут быть получены из БД в
   случае dl2ResultsCell.
#. Кэширование должно производится на стороне сервиса, а не в DAO, слой
   данных просто выдаёт информацию, но никак не управляет запросами и не
   кэширует данные между ними. Схема работы с источниками и кэшем.
#. Модель является простым POJO-объектом с базовой логикой. Например
   есть пользователь, если нужно получить его фамилию, то это выполняет
   сам объект, если нужно получить состояние истина/ложь по вопросу,
   указал ли пользователь фамилию, то тоже объект. Если какие-то
   расчёты, которые не задействуют группы других объектов, то сам. Но
   если требуется проверка прав пользователя (достаточно ли их), то
   обрабатывает сервис. В метод сервиса передаётся объект, внутри
   решается как проверить права, например, запросить через DAO из базы
   такого пользователя с такими правами. Показать на примере
   spCanShowStrangerLog.
#. Рассказать про запуск и настройку Tomcat, настройку manager, чтобы
   удобно управлять загрузкой новых версий приложения.
#. Создание нового пустого веб приложения, настройки web.xml, где
   расположены классы, представления, WEB-INF и конфигурационные файлы.
#. Основные настройки Spring: конфигурирование путей расположения
   представлений, контроллеров, обход коллизии со старым кодом и
   статическим контентом. На какие части разбит конфигурационный файл,
   где они располагаются.
#. Где расположены файлы проецирования для Hibernate, где SQL-запросы и
   настройки подключения к БД. Описать зачем потребовалось проецирование
   через XML на Native-SQL.
#. Какие библиотеки установить в lib самого Tomcat, какие в локальный
   lib приложения.

| 

 Указать, где использовал паттерн «Декоратор» (он же «Обертка» или
«Wrapper»). Зачем применялся.

