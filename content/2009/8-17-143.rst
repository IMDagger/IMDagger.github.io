Замыкания
=========
:date: 2009-08-17 16:45:35
:tags: python
:category: text
:author: IMDagger
:yaru-link: http://imdagger.ya.ru/replies.xml?item_no=143

Всё же очень хорошая и полезная вещь эти замыкания, если
пользоваться ими с толком. Мне нужно было сделать, так, чтобы при вызове
:code:`handle\_event` с генератором в качестве параметра выполнялся метод
:code:`\_enter\_process`, а после того, как генератор завершится (но это уже
будет сделано вышестоящим кодом), вызывался метод :code:`\_exit\_process`, но
для объекта, для которого был вызвал :code:`handle\_event`. Я сделал так,
чтобы метод :code:`handle\_event` создавал на каждый вызов функцию
:code:`with\_exit` (а она захватывала окружение, и self тоже), которая
исполнит сначала необходимый процесс, а затем не забудет вызвать функцию
выхода процесса. Вышло что-то вроде такого:

.. code-block:: python

    class Warrior(GameObject):
        ...
        def handle_event(self, process):
            def with_exit():
                for info in process:
                    yield info
                self._exit_process()

            self._enter_process()
            ...

Всё это дело я снабдил комментариями у себя и докстрингами, как
полагается ;). Думаю я доволен тем, что наваял :). Теперь я могу не
бояться забыть вызвать (до этого такое уже было x-[ ) эти
функции-обрамления, :code:`handle\_event` сама позаботится.
