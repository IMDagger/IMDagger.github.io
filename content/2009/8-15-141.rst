Прокололся
==========
:date: 2009-08-15 17:12:43
:tags: python, генератор
:category: text
:author: IMDagger
:yaru-link: http://imdagger.ya.ru/replies.xml?item_no=141

Нужно было, чтобы функция созвращала работала, как сопрограмма, т.е.
была генератором. Но при этом я решил вынести часть кода для удобства в
другую функцию. Но вызов :code:`yield` там тоже остался. Получилось нечто
подобное:

    **class** Warrior(Controller)\ **:**

        **def** \_\_rotating(\ **self**, to\_look)\ **:**

            …

            **for** … **in** …\ **:**

                …

                **yield** look

        **def** \_\_look\_at(\ **self**, to\_look)\ **:**

            …

            **self**.\_\_rotating(old\_look, to\_look)

        **def** \_\_moving(\ **self**, steps)\ **:**

            … 

            **for** new\_pos **in** steps\ **:**

                **self**.\_\_look\_at(new\_pos)

                …

                **yield** …

.. cut:: читать дальше
  :paragraph: yes

  И сижу себе мучаюсь, ищу проблему в коде (наивный, ошибка в моём
  ДНК). Мой мозг почему-то подумал, что **yield** из *\_\_rotating*
  прервёт сопрограмму аж до уровня выше *\_\_moving*, т.е. то, что вызвало
  весь основной процесс. И не подумал, что генератор будет возвращён ещё
  внутри *\_\_look\_at* и проигнорирован.

  Пришлось переделать так, чтобы генератор вложенных функций тоже
  итерировался с возвратом в главную вызывающую часть:

      **class** Warrior(Controller)\ **:**

          **def** \_\_rotating(\ **self**, to\_look)\ **:**

              …

              **for** … **in** …\ **:**

                  …

                  **yield** look

      |

          **def** \_\_look\_at(\ **self**, to\_look)\ **:**

              …

              **return** **self**.\_\_rotating(old\_look, to\_look)

      |

          **def** \_\_moving(\ **self**, steps)\ **:**

              … 

              **for** new\_pos **in** steps\ **:**

                  **for** look in **self**.\_\_look\_at(new\_pos)\ **:**

                     **yield** look

                  …

                  **yield** …
