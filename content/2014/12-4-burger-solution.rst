Квест про бургеры из Chaos of Deponia
=====================================

:date: 2014-12-04 02:20
:tags: программирование, chaos, deponia, квест, прохождение, игра, python
:category: text
:author: IMDagger

Во время прохождения квеста про ресторан в игре Chaos of Deponia столкнулся с
задачей, в которой нужно не имея денег получить бесплатную печенюшку. Но эта
Печенка даётся только, если возьмёшь гамбургеры из утконоса и напиток из
утконоса. Т.е. следовало сделать так, чтобы на подносе **не осталось** платной
еды и ценник был **0с**.

Уже после первых обменов руками видно, что в правилах есть какая-то «утечка».
Ибо запросто можно придти в ситуацию, что на подносе ничего нет, а стоимость
отличная от нуля. Сразу возникает мысль, что этим можно воспользоваться и в другую
сторону.

Но так как я человек ленивый, то я сразу набросал черновой скрипт для правил:

- Стаканов есть 3 размера и от питья можно отказаться
- Еды есть два вида: большой и маленький гамбургеры
- При увеличении размера стакана к стоимости нужно добавить +0.5c
- При уменьшении размера стакана к стоимости нужно добавить -0.5c
- При обмене большого гамбургера на маленький или обратно, цена меняется на 1с
  (в ту или другую сторону)
- Стакан размера 3 можно бесплатно обменять на большой гамбургер и обратно
- Большой гамбургер можно бесплатно обменять на два малых и обратно
- А вот два стакана размера 1 можно обменять только на 2 малых гамбургера
- Заказать можно только следующие исходные позиции: один стакан размера 1
  и один малый гамбургер за 2c; два малых гамбургера, один стакан размера 2
  и одну печенку за 3c; один стакан размера 3, один большой гамбургер и
  несколько печенок за 4c
- Еды и питья на подносе не может быть больше 4 единиц каждого

Хоть и ясно, что первая исходная позиция не подходит, т.к. нет бесплатных
печенок, но я не оставил надежды найти вариант выйти в отрицательную зону
и получить монет. Хотя, забегая вперёд, скажу, что это не вышло, минимум
это **0c**. Далее идёт код, который рекурсивным перебором с мемоизацией
минимизирует состояния (его следовало сделать и покороче и побыстрее,
но особого желания возиться не было):

.. cut:: (Подробнее)
   :paragraph: yes

   .. code-block:: python

      def solve(state, cost, path, reached):
          drink, food = state
          # отбрасывает случаи, где слишком много еды на подносе
          if sum(drink) > 4 or sum(food) > 4:
              return
          skey = tuple(map(tuple, state))
          if skey in reached:
              scost, spath = reached[skey]
              if scost < cost or scost == cost and len(spath) <= len(path):
                  return
          reached[skey] = (cost, path)

          for dkey in xrange(1, len(drink)):
              # попробовать увеличить стакан
              if dkey < 3 and drink[dkey] > 0:
                  new_drink = drink[:]
                  new_drink[dkey] -= 1
                  new_drink[dkey + 1] += 1
                  solve((new_drink, food), cost + 0.5, path + [('drink>', dkey),], reached)
              # попробовать уменьшить стакан
              if dkey > 0 and drink[dkey] > 0:
                  new_drink = drink[:]
                  new_drink[dkey] -= 1
                  if dkey > 1:
                      new_drink[dkey - 1] += 1
                  solve((new_drink, food), cost - 0.5, path + [('drink<', dkey),], reached)
          for fkey in xrange(1, len(food)):
              # попробовать увеличить гамбургер
              if fkey < 2 and food[fkey] > 0:
                  new_food = food[:]
                  new_food[fkey] -= 1
                  new_food[fkey + 1] += 1
                  solve((drink, new_food), cost + 1.0, path + [('food>', fkey)], reached)
              # попробовать уменьшить гамбургер
              if fkey > 1 and food[fkey] > 0:
                  new_food = food[:]
                  new_food[fkey] -= 1
                  new_food[fkey - 1] += 1
                  solve((drink, new_food), cost - 1.0, path + [('food<', fkey)], reached)

          # обмен большого гамбургера на два малых
          if food[2] > 0 and sum(food) + 1 <= 4:
              new_food = food[:]
              new_food[2] -= 1
              new_food[1] += 2
              solve((drink, new_food), cost, path + ['food2->food1',], reached)

          # обмен большого гамбургера на стакан размера 3
          if food[2] > 0:
              new_food = food[:]
              new_drink = drink[:]
              new_food[2] -= 1
              new_drink[3] += 1
              solve((new_drink, new_food), cost, path + ['food2->drink3',], reached)

          # обмен стакана размера 3 на большой гамбургер
          if drink[3] > 0:
              new_food = food[:]
              new_drink = drink[:]
              new_drink[3] -= 1
              new_food[2] += 1
              solve((new_drink, new_food), cost, path + ['drink3->food2',], reached)

          # обмен двух малых гамбургеров на один большой
          if food[1] >= 2:
              new_food = food[:]
              new_food[1] -= 2
              new_food[2] += 1
              solve((drink, new_food), cost, path + ['food1->food2',], reached)

          # обмен двух стаканов размера 1 на два мелких гамбургера
          if drink[1] >= 2:
              new_food = food[:]
              new_drink = drink[:]
              new_drink[1] -= 2
              new_food[1] += 2
              solve((new_drink, new_food), cost, path + ['drink1->food1',], reached)

      found = {}
      # начальные позиции
      solve(([0, 1, 0, 0], [0, 1, 0]), 2, [], found)
      solve(([0, 0, 1, 0], [0, 2, 0]), 3, [], found)
      solve(([0, 0, 0, 1], [0, 0, 1]), 4, [], found)
      # выбор решения, чтобы взять поднос без денег
      for cost, path in found.itervalues():
          if cost <= 0:
              print path

И отработавшая программа выдаст: :code:`[('drink>', 2), 'drink3->food2', ('food<', 2), 'food1->food2', ('food<', 2), 'food1->food2', 'food2->drink3', ('drink<', 3), ('drink<', 2), ('drink<', 1)]`, что означает:

- Взять два малых гамбургера и стакан 2 размера
- Стакан 2 размера увеличить до 3
- Обменять стакан 3 размера на большой гамбургер
- Большой гамбургер уменьшить
- Два малых гамбургера обменять на большой
- Большой гамбургер уменьшить
- Два малых гамбургера обменять на большой
- Обменять большой гамбургер на стакана 3 размера
- Уменьшить стакан до 2 размера
- Уменьшить стакана до 1 размера
- Отказаться от питься
- Deal with it! Теперь есть бесплатное печенье и **0c**
